"""
Django settings for bookmarks project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    'mysite.com',
    '67e8-195-178-200-101.ngrok.io',
]

# Application definition

INSTALLED_APPS = [
    'accounts.apps.AccountsConfig',  # приложение accounts (наше)
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'images.apps.ImagesConfig',
    'social_django',
    'sorl.thumbnail',
    'debug_toolbar',
]

MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'bookmarks.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bookmarks.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

# -------------------------------------------------------- STATIC settings

STATIC_URL = '/static/'

# здесь мы указываем откуда будем доставать статику и подключать к шаблону,
# с помощью тега {% static 'css/style.css' %}
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# здесь мы указываем куда django будет собирать всю статику проекта при команде collectstatic
# на самом деле это основная папка, от куда берется статика проекта
# и должна называться они staticfiles
STATIC_ROOT = BASE_DIR.joinpath('staticfiles')
# -------------------------------------------------------- STATIC settings

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# -------------------------------------- LOGIN

# куда django будет перенаправлять при успешной авторизации (если не указан GET параметр next)
LOGIN_REDIRECT_URL = 'accounts:dashboard'

# при декоратре @login_required или LoginRequiredMixin - куда перенаравлять для авторизации
LOGIN_URL = 'accounts:login'

# адрес по которому пользователь выйдет из своего аккаунта (разорвётся сессия)
LOGOUT_URL = 'accounts:logout'
# -------------------------------------- LOGIN


# email backend, который позвляет нам вместо почты использовать консоль
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

## -------------------------------------- MEDIA
# базовый url от которого будет формироваться адреса медиа файлов.
MEDIA_URL = '/media/'

# путь в файловой системе, где эти файлы будут храниться
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
## -------------------------------------- MEDIA


# --------------------------------------- AUTHENTICATION BACKENDS
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'accounts.authentications.EmailAuthBackend',
    'social_core.backends.google.GoogleOAuth2',  # for google
    'social_core.backends.yandex.YandexOAuth2',  # for yandex
    'social_core.backends.vk.VKOAuth2',  # for vk
]

# google
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.getenv('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.getenv('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET')

# yandex
SOCIAL_AUTH_YANDEX_OAUTH2_KEY = os.getenv('SOCIAL_AUTH_YANDEX_OAUTH2_KEY')
SOCIAL_AUTH_YANDEX_OAUTH2_SECRET = os.getenv('SOCIAL_AUTH_YANDEX_OAUTH2_SECRET')

# vk
SOCIAL_AUTH_VK_OAUTH2_KEY = os.getenv('SOCIAL_AUTH_VK_OAUTH2_KEY')
SOCIAL_AUTH_VK_OAUTH2_SECRET = os.getenv('SOCIAL_AUTH_VK_OAUTH2_SECRET')
# --------------------------------------- AUTHENTICATION BACKENDS

# thumbnail
THUMBNAIL_DEBUG = True


# django-debug-toolbar
def show_toolbar(request):
    return True

SHOW_TOOLBAR_CALLBACK = show_toolbar
